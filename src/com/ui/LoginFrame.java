package com.ui;

import com.classes.User;
import com.database.DatabaseConfiguration;
import com.database.Scripts;
import com.lookandfeel.LookAndFeel;
import com.prototypes.Translator;
import com.prototypes.Validator;
import com.pattern.PatternChecker;
import com.window.dialog.PopupPane;
import com.window.location.FrameEvents;
import files.FileProcessor;
import files.LanguageResources;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.Map;
import java.util.ResourceBundle;
import javax.swing.*;
import org.apache.commons.codec.digest.DigestUtils;

import static files.FileProcessor.getResourceBundle;

public final class LoginFrame extends JFrame implements Translator, Validator
{
    private static int clickCount = 0;
    private static final User LOGGED_USER = new User("", "");
    private final String FILE_NAME = "preference.properties";
    private final String CHECKBOX  = "remembermecheckbox";
    private final String USERNAME  = "logusername";

    private ResourceBundle resources;
    private final FileProcessor filePro;

    /**
     * Creates new form LoginFrame
     */
    @SuppressWarnings("LeakingThisInConstructor")
    public LoginFrame()
    {
        filePro = FileProcessor.createFile("preference");
        filePro.loadFile();

        initComponents();
        FrameEvents.draggableWindow(this, containerPanel);
        FrameEvents.centerFrame(this);

        LanguageResources.setLanguageResourceFile(this, langComboBox);
        outerPanel.setVisible(false);
        setOptionOnStart();

        textFieldListener(usernameField);
        textFieldListener(passwordField);
        checkBoxListener();
    }

    public static String getloggedUser() {
        return LOGGED_USER.getUsername();
    }

    public static String getPassword() {
        return LOGGED_USER.getPassword();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        outerPanel = new JPanel();
        jProgressBar1 = new JProgressBar();
        containerPanel = new JPanel();
        innerPanel = new JPanel();
        innerPanel1 = new JPanel();
        usernameField = new JTextField();
        jLabel5 = new JLabel();
        usernameLabel = new JLabel();
        passwordLabel = new JLabel();
        passwordField = new JPasswordField();
        rememberCheckBox = new JCheckBox();
        btnLogin = new JButton();
        createAccLabel = new JLabel();
        langComboBox = new JComboBox();
        rightPanel = new JPanel();
        closeLabel = new JLabel();
        minimize = new JLabel();
        leftPanel = new JPanel();
        upperPanel = new JPanel();
        headerLabel = new JLabel();

        outerPanel.setBackground(new Color(255, 255, 255));
        outerPanel.setBorder(BorderFactory.createLineBorder(new Color(102, 102, 102)));
        outerPanel.setEnabled(false);

        jProgressBar1.setIndeterminate(true);
        jProgressBar1.setRequestFocusEnabled(false);
        jProgressBar1.setString("");

        GroupLayout outerPanelLayout = new GroupLayout(outerPanel);
        outerPanel.setLayout(outerPanelLayout);
        outerPanelLayout.setHorizontalGroup(
                outerPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(outerPanelLayout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(jProgressBar1, GroupLayout.PREFERRED_SIZE, 176, GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(22, Short.MAX_VALUE))
        );
        outerPanelLayout.setVerticalGroup(
                outerPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(outerPanelLayout.createSequentialGroup()
                                .addGap(34, 34, 34)
                                .addComponent(jProgressBar1, GroupLayout.PREFERRED_SIZE, 18, GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(34, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);

        containerPanel.setBackground(new Color(230, 230, 230));
        containerPanel.setBorder(BorderFactory.createLineBorder(new Color(102, 102, 102)));

        innerPanel.setBackground(new Color(255, 255, 255));

        innerPanel1.setBackground(new Color(255, 255, 255));

        usernameField.setFont(new Font("Calibri", 0, 14)); // NOI18N
        usernameField.setHorizontalAlignment(JTextField.LEFT);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("files/Language_zu_ZA"); // NOI18N
        usernameField.setToolTipText(bundle.getString("tip1")); // NOI18N
        usernameField.setMargin(new Insets(6, 6, 2, 2));
        usernameField.setName(""); // NOI18N

        jLabel5.setIcon(new ImageIcon(getClass().getResource("/com/images/Kids of the Night.png"))); // NOI18N

        usernameLabel.setFont(new Font("Calibri", 1, 16)); // NOI18N
        usernameLabel.setText("Username");

        passwordLabel.setFont(new Font("Calibri", 1, 16)); // NOI18N
        passwordLabel.setText("Password");

        passwordField.setFont(new Font("Calibri", 0, 14)); // NOI18N
        passwordField.setCursor(new Cursor(Cursor.TEXT_CURSOR));
        passwordField.setMargin(new Insets(6, 6, 0, 2));

        rememberCheckBox.setBackground(new Color(255, 255, 255));
        rememberCheckBox.setFont(new Font("Calibri Light", 0, 14)); // NOI18N
        rememberCheckBox.setText("Remember me");
        rememberCheckBox.setCursor(new Cursor(Cursor.HAND_CURSOR));
        rememberCheckBox.setIconTextGap(8);
        rememberCheckBox.setMargin(new Insets(2, 0, 2, 2));
        rememberCheckBox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                rememberCheckBoxActionPerformed(evt);
            }
        });

        btnLogin.setFont(new Font("Tahoma", 1, 13)); // NOI18N
        btnLogin.setForeground(new Color(0, 0, 51));
        btnLogin.setText("Login");
        btnLogin.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        btnLogin.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        createAccLabel.setFont(new Font("Calibri Light", 1, 15)); // NOI18N
        createAccLabel.setForeground(new Color(0, 102, 255));
        createAccLabel.setHorizontalAlignment(SwingConstants.RIGHT);
        createAccLabel.setText("Create an account");
        createAccLabel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        createAccLabel.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                createAccLabelMouseClicked(evt);
            }
        });

        langComboBox.setFont(new Font("Tahoma", 0, 12)); // NOI18N
        langComboBox.setModel(new DefaultComboBoxModel(new String[] { "English (default)", "Sesotho", "Xhosa", "Zulu" }));
        langComboBox.setAutoscrolls(true);
        langComboBox.setMinimumSize(new Dimension(115, 19));
        langComboBox.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
                langComboBoxItemStateChanged(evt);
            }
        });

        GroupLayout innerPanel1Layout = new GroupLayout(innerPanel1);
        innerPanel1.setLayout(innerPanel1Layout);
        innerPanel1Layout.setHorizontalGroup(
                innerPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(GroupLayout.Alignment.TRAILING, innerPanel1Layout.createSequentialGroup()
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(langComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addGap(58, 58, 58))
                        .addGroup(innerPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addGroup(innerPanel1Layout.createSequentialGroup()
                                        .addGap(57, 57, 57)
                                        .addGroup(innerPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                .addGroup(innerPanel1Layout.createSequentialGroup()
                                                        .addGap(137, 137, 137)
                                                        .addComponent(jLabel5, GroupLayout.PREFERRED_SIZE, 106, GroupLayout.PREFERRED_SIZE))
                                                .addGroup(innerPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                                        .addGroup(innerPanel1Layout.createSequentialGroup()
                                                                .addComponent(btnLogin, GroupLayout.PREFERRED_SIZE, 89, GroupLayout.PREFERRED_SIZE)
                                                                .addGap(88, 88, 88)
                                                                .addComponent(createAccLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                        .addComponent(usernameField)
                                                        .addComponent(passwordField, GroupLayout.PREFERRED_SIZE, 378, GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(rememberCheckBox, GroupLayout.PREFERRED_SIZE, 198, GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(passwordLabel, GroupLayout.PREFERRED_SIZE, 161, GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(usernameLabel, GroupLayout.PREFERRED_SIZE, 189, GroupLayout.PREFERRED_SIZE)))
                                        .addContainerGap(57, Short.MAX_VALUE)))
        );
        innerPanel1Layout.setVerticalGroup(
                innerPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(GroupLayout.Alignment.TRAILING, innerPanel1Layout.createSequentialGroup()
                                .addContainerGap(294, Short.MAX_VALUE)
                                .addComponent(langComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addGap(78, 78, 78))
                        .addGroup(innerPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addGroup(innerPanel1Layout.createSequentialGroup()
                                        .addGap(3, 3, 3)
                                        .addComponent(jLabel5, GroupLayout.PREFERRED_SIZE, 92, GroupLayout.PREFERRED_SIZE)
                                        .addGap(36, 36, 36)
                                        .addComponent(usernameLabel, GroupLayout.PREFERRED_SIZE, 20, GroupLayout.PREFERRED_SIZE)
                                        .addGap(3, 3, 3)
                                        .addComponent(usernameField, GroupLayout.PREFERRED_SIZE, 38, GroupLayout.PREFERRED_SIZE)
                                        .addGap(22, 22, 22)
                                        .addComponent(passwordLabel, GroupLayout.PREFERRED_SIZE, 18, GroupLayout.PREFERRED_SIZE)
                                        .addGap(3, 3, 3)
                                        .addComponent(passwordField, GroupLayout.PREFERRED_SIZE, 38, GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(rememberCheckBox)
                                        .addGap(18, 18, 18)
                                        .addGroup(innerPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                                .addComponent(btnLogin, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE)
                                                .addComponent(createAccLabel, GroupLayout.PREFERRED_SIZE, 15, GroupLayout.PREFERRED_SIZE))
                                        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        GroupLayout innerPanelLayout = new GroupLayout(innerPanel);
        innerPanel.setLayout(innerPanelLayout);
        innerPanelLayout.setHorizontalGroup(
                innerPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(innerPanel1, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        innerPanelLayout.setVerticalGroup(
                innerPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(innerPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        rightPanel.setBackground(new Color(45, 141, 156));
        rightPanel.setPreferredSize(new Dimension(108, 192));

        closeLabel.setIcon(new ImageIcon(getClass().getResource("/com/images/close24.png"))); // NOI18N
        closeLabel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        closeLabel.addMouseMotionListener(new MouseMotionAdapter() {
            public void mouseMoved(MouseEvent evt) {
                closeLabelMouseMoved(evt);
            }
        });
        closeLabel.addMouseListener(new MouseAdapter() {
            public void mouseExited(MouseEvent evt) {
                closeLabelMouseExited(evt);
            }
            public void mousePressed(MouseEvent evt) {
                closeLabelMousePressed(evt);
            }
        });

        minimize.setIcon(new ImageIcon(getClass().getResource("/com/images/minimize.png"))); // NOI18N
        minimize.setCursor(new Cursor(Cursor.HAND_CURSOR));
        minimize.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent evt) {
                minimizeMousePressed(evt);
            }
        });

        GroupLayout rightPanelLayout = new GroupLayout(rightPanel);
        rightPanel.setLayout(rightPanelLayout);
        rightPanelLayout.setHorizontalGroup(
                rightPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(GroupLayout.Alignment.TRAILING, rightPanelLayout.createSequentialGroup()
                                .addContainerGap(45, Short.MAX_VALUE)
                                .addComponent(minimize, GroupLayout.PREFERRED_SIZE, 23, GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(closeLabel)
                                .addGap(18, 18, 18))
        );
        rightPanelLayout.setVerticalGroup(
                rightPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(rightPanelLayout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addGroup(rightPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                        .addComponent(minimize, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(closeLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap(91, Short.MAX_VALUE))
        );

        leftPanel.setBackground(new Color(45, 141, 156));
        leftPanel.setPreferredSize(new Dimension(108, 192));

        GroupLayout leftPanelLayout = new GroupLayout(leftPanel);
        leftPanel.setLayout(leftPanelLayout);
        leftPanelLayout.setHorizontalGroup(
                leftPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGap(0, 122, Short.MAX_VALUE)
        );
        leftPanelLayout.setVerticalGroup(
                leftPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGap(0, 130, Short.MAX_VALUE)
        );

        upperPanel.setBackground(new Color(45, 141, 156));

        headerLabel.setFont(new Font("Segoe UI Light", 0, 24)); // NOI18N
        headerLabel.setForeground(new Color(255, 255, 255));
        headerLabel.setHorizontalAlignment(SwingConstants.CENTER);
        headerLabel.setFocusable(false);
        headerLabel.setHorizontalTextPosition(SwingConstants.CENTER);

        GroupLayout upperPanelLayout = new GroupLayout(upperPanel);
        upperPanel.setLayout(upperPanelLayout);
        upperPanelLayout.setHorizontalGroup(
                upperPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(upperPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(headerLabel, GroupLayout.PREFERRED_SIZE, 463, GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(19, Short.MAX_VALUE))
        );
        upperPanelLayout.setVerticalGroup(
                upperPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(GroupLayout.Alignment.TRAILING, upperPanelLayout.createSequentialGroup()
                                .addContainerGap(15, Short.MAX_VALUE)
                                .addComponent(headerLabel, GroupLayout.PREFERRED_SIZE, 47, GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18))
        );

        GroupLayout containerPanelLayout = new GroupLayout(containerPanel);
        containerPanel.setLayout(containerPanelLayout);
        containerPanelLayout.setHorizontalGroup(
                containerPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(containerPanelLayout.createSequentialGroup()
                                .addComponent(leftPanel, GroupLayout.PREFERRED_SIZE, 122, GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addGroup(containerPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                        .addComponent(innerPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(upperPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 0, 0)
                                .addComponent(rightPanel, GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE))
        );
        containerPanelLayout.setVerticalGroup(
                containerPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(containerPanelLayout.createSequentialGroup()
                                .addComponent(upperPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(innerPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(containerPanelLayout.createSequentialGroup()
                                .addGroup(containerPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(leftPanel, GroupLayout.PREFERRED_SIZE, 130, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(rightPanel, GroupLayout.PREFERRED_SIZE, 130, GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 388, Short.MAX_VALUE))
        );

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(containerPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(containerPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>                        

    private void closeLabelMouseMoved(MouseEvent evt) {
        closeLabel.setIcon(new ImageIcon(getClass().getResource("/com/images/close2.png")));
    }

    private void closeLabelMouseExited(MouseEvent evt) {
        closeLabel.setIcon(new ImageIcon(getClass().getResource("/com/images/close24.png")));
    }

    private void minimizeMousePressed(MouseEvent evt) {
        FrameEvents.minimizeWindow(this);
    }

    private void closeLabelMousePressed(MouseEvent evt) {
        FrameEvents.closeWindow(this, getResourceBundle(filePro));
    }

    private void rememberCheckBoxActionPerformed(ActionEvent evt)
    {
        String username = PatternChecker.getInputValue(usernameField);
        String selected = String.valueOf(rememberCheckBox.isSelected());
        filePro.getProperties().setProperty(CHECKBOX, selected);
       
        if (!(username.length() < 1) && (rememberCheckBox.isSelected())) {
            filePro.getProperties().setProperty("logusername", username);
            filePro.saveFile();
        }
        filePro.saveFile();
    }

    private void btnLoginActionPerformed(ActionEvent evt) {
        String encrypt = DigestUtils.sha1Hex(PatternChecker.getInputValue(passwordField));
        if (isEmpty()) {
            verifyUser(usernameField.getText(), encrypt);
        }
    }

    private void createAccLabelMouseClicked(MouseEvent evt) {
        clickCount = 0;

        /* Setup and load the Signup frame components */
        setVisible(false);
        SignupFrame signup = new SignupFrame();
        signup.setVisible(true);
    }

    private void langComboBoxItemStateChanged(ItemEvent evt) {
        /* Increment the value to indicate a click event */
        clickCount++;

        String language = filePro.getProperties().get("language").toString();

        if (language.equals("English (default)")) {
            clickCount++;
        }
        LanguageResources.selectLanguage(langComboBox, clickCount, this, containerPanel, outerPanel, this);
    }
    
    private void verifyUser(String username, String password)
    {
        Map<String, String> user;

        if (DatabaseConfiguration.isConnected())
        {
            user = new Scripts().getUserAccount();
            String name = user.get(password);

            if (name != null && name.equalsIgnoreCase(username))
            {
                loadPrefs(username);

                PopupPane.infoDialog(this, resources.getString("userauth"), resources.getString("auth"));

                new Scripts().logSession(LocalDate.now(), LocalTime.now(), password);
                LOGGED_USER.setUsername(username.trim());
                LOGGED_USER.setPassword(password.trim());
                
                loadUIFrame();
            }
            else {
                String msg = resources.getString("wrongpassword");
                PopupPane.infoDialog(this, msg, resources.getString("auth"));
            }
        }
        else {
            PopupPane.errDialog(this, resources.getString("dbservererr"), resources.getString("dbservermsg"));
            System.exit(0);
        }
    }

    private void setHeaderMessage(String title)
    {
        String count = filePro.getProperties().getProperty("count");

        if (!(count == null) && !count.equals("0")) {
            String username = LanguageResources.capitalize(filePro.getProperties().getProperty("session"));
            headerLabel.setText(String.format("%s %s", title, username));
        }
    }

    private void setOptionOnStart()
    {
        String path = new File(FILE_NAME).getAbsolutePath();
        boolean exists = new File(path).exists();

        if (exists && !(filePro.getProperties().getProperty(USERNAME) == null))
        {
            String username = filePro.getProperties().getProperty(USERNAME);
            String state = filePro.getProperties().getProperty(CHECKBOX);

            if (state.equals("true")) {
                rememberCheckBox.setSelected(true);
                usernameField.setText(username.trim());
            }
            else {
                rememberCheckBox.setSelected(false);
            }
        }
    } 

    private void loadPrefs(String username) {
        filePro.loadFile();
        filePro.getProperties().setProperty("count", "1");
        filePro.getProperties().setProperty("session", username);
        filePro.saveFile();
    }
     
    /**
     * Determines whether a text field is empty when the login 
     * button is pressed by the user.
     *
     * @return <tt>true</tt> if the text fields are empty, 
     *         <tt>false</tt> otherwise.
     */
    @Override
    public boolean isEmpty()
    {
        if ((usernameField.getText().isEmpty()) || (passwordField.getPassword().length  < 1)) {
            renderEmptyFields(usernameField, passwordField);
            return false;
        }
        renderEmptyFields(usernameField, passwordField);
        return true;
    } 

    /**
     * Renders the appropriate text fields within the GUI whenever 
     * the <code>isEmpty</code> method returns <tt>false</tt> for any 
     * number of fields stored in the array.
     *
     * @param textField1
     * @param textField2
     */
    public static void renderEmptyFields(JTextField textField1, JTextField textField2)
    {
        JTextField[] fields = new JTextField[]{
                textField2, textField1
        };

        boolean[] isEmpty = new boolean[] {
                textField2.getText().isEmpty(),
                textField1.getText().isEmpty()
        };

        for (int index = 0; index < fields.length; index++)
        {
            if (isEmpty[index]) {
                fields[index].setBackground(Color.red);
                fields[index].requestFocus();
            }
        }
        renderValidFields(isEmpty, fields);
    } 

    /**
     * Renders text fields that meet the validation rules by iterating 
     * over the GUI components individually.
     *
     * @param isEmpty if {@code true}, ignore the text field
     * @param field the text field to render when iterating 
     *              over the array
     */
    public static void renderValidFields(boolean[] isEmpty, JTextField[] field)
    {
        int size =  isEmpty.length;

        for (int index = 0; index < size; index++)
        {
            if (!isEmpty[index]){
                field[index].setBackground(Color.WHITE);
            }
        }
    }

    private void checkBoxListener()
    {
        rememberCheckBox.addKeyListener(new KeyAdapter()
        {
            @Override
            public void keyPressed(KeyEvent key)
            {
                // filePro.loadFile();
                String selected = String.valueOf(rememberCheckBox.isSelected());
                String state = filePro.getProperties().get(CHECKBOX).toString();

                if (!state.equalsIgnoreCase(selected)) {
                    filePro.getProperties().setProperty(CHECKBOX, selected);
                    filePro.saveFile();
                }
            }
        });
    }

    private void textFieldListener(JTextField textField)
    {
        textField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent key) {
                textField.setBackground(Color.WHITE);
            }
        });
    }

    private void loadUIFrame() {
        LoadMenuFrame delayFrame = new LoadMenuFrame();
        setVisible(false);
        delayFrame.setVisible(true);
    }

    @Override
    public void updateLanguagePreference(String resFile, String language)
    {
        resources = ResourceBundle.getBundle(resFile);

        setHeaderMessage(resources.getString("welcome"));
        usernameLabel.setText(resources.getString("username"));
        usernameField.setToolTipText(resources.getString("tip1"));

        passwordLabel.setText(resources.getString("password"));
        passwordField.setToolTipText(resources.getString("tip2"));

        rememberCheckBox.setText(resources.getString("checkBox"));
        btnLogin.setText(resources.getString("login"));
        createAccLabel.setText(resources.getString("label"));
        minimize.setToolTipText(resources.getString("minimize"));
        closeLabel.setToolTipText(resources.getString("exit"));
    }

    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        LookAndFeel.setLookAndFeel("Windows");

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new LoginFrame().setVisible(true);
        });
    }

    // Variables declaration - do not modify                     
    private static JButton btnLogin;
    private static JLabel closeLabel;
    private static JPanel containerPanel;
    private static JLabel createAccLabel;
    private static JLabel headerLabel;
    private static JPanel innerPanel;
    private static JPanel innerPanel1;
    private static JLabel jLabel5;
    private JProgressBar jProgressBar1;
    private static JComboBox langComboBox;
    private static JPanel leftPanel;
    private static JLabel minimize;
    private JPanel outerPanel;
    private static JPasswordField passwordField;
    private static JLabel passwordLabel;
    private static JCheckBox rememberCheckBox;
    private static JPanel rightPanel;
    private static JPanel upperPanel;
    private static JTextField usernameField;
    private static JLabel usernameLabel;                 
}