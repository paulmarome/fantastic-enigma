package com.ui;

import java.awt.EventQueue;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.security.SecureRandom;
import javax.swing.JFrame;
import javax.swing.SwingWorker;
import java.io.*;
import java.nio.file.Files;
import java.time.LocalDate;
import java.util.*;
import com.classes.User;
import com.database.*;
import com.server.DatabaseServer;
import com.lookandfeel.LookAndFeel;
import com.window.location.FrameEvents;
import files.*;

public class WelcomeFrame extends JFrame implements PropertyChangeListener
{
    private static FileProcessor files;
    private static final String DATABASE = "databaseStatus";
    private final String PREFIX_NAME = "preference";
    private GUIDelayTask task;
     
    /**
     * Creates new form WelcomeFrame
     */
    @SuppressWarnings("LeakingThisInConstructor")
    public WelcomeFrame() 
    {
        files = FileProcessor.createFile(PREFIX_NAME);
        initFile(setPath());
        files.loadFile();
        
        initComponents(); 
        DatabaseServer.startDatabaseServer(this.rootPane);        
        
        FrameEvents.centerFrame(this);
        startTask();
    }
    
    private boolean setPath() {
        String path = new File(PREFIX_NAME + ".properties").getAbsolutePath();
        return Files.exists(new File(path).toPath());   
    }
    
    public final void initFile(boolean state)
    {    
        if (!state) {
            files = FileProcessor.createFile(PREFIX_NAME);
            files.getProperties().setProperty(DATABASE, "false");
            files.saveFile();
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        progressBar = new javax.swing.JProgressBar();
        imageLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        progressBar.setStringPainted(true);

        imageLabel.setBackground(new java.awt.Color(255, 102, 102));
        imageLabel.setForeground(new java.awt.Color(255, 102, 102));
        imageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/images/stem.png"))); // NOI18N
        imageLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 204, 255)));
        imageLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(imageLabel)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void propertyChange(PropertyChangeEvent event)
    {
        if ("progress".equals(event.getPropertyName())) {
            int progress = (Integer) event.getNewValue();
            progressBar.setValue(progress);
        }
    }
    
    private void startTask() {
        task = new GUIDelayTask();
        task.addPropertyChangeListener(this);
        task.execute();
    }
    
    private void checkDatabaseStatus() 
    {
        // DatabaseServer.startDatabaseServer(this);      
        DatabaseConfiguration.getConnection().configConnection();               
        
        boolean exists = files.getProperties().containsKey(DATABASE);
        initFile(exists);
         
        String state = files.getProperties().getProperty(DATABASE);
        setDefaultResourceBundle(files);
    
        if (state.equals("false"))
        {
            if (DatabaseConfiguration.isConnected())
            {
                files.getProperties().setProperty(DATABASE, "true");
                files.getProperties().setProperty("step", "0");
                files.saveFile();
                loadFrame();         
            }
            else {
                configFrame();
            }
        }
        else
        {
            if (DatabaseConfiguration.isConnected())
            {
                setProperties(); 
                
                /* reset the user session to a null state */
                resetPreferenceIfExist();
                
                /* 
                 * Method invocation is due to precaution, or for lack of a 
                 * better word, 'a saftey assurance check'; the user might have 
                 * accidentally deleted the database tables, or worse, the
                 * database might be corrupt. So create the tables regardless 
                 * of the outcome.   
                 */
                Table.createTables();      
                      
                requestPreviousData();           
                loginFrame();
            }
            else 
            {
                String username = files.getProperties().getProperty("dbusername");
                String password = files.getProperties().getProperty("dbpassword");              
                password = password == null ? "" : password; 
                
                String dbUser = files.getProperties().getProperty("dbusername");
                
                if (dbUser == null) {
                    configFrame();
                }
                else
                {
                    DatabaseConfiguration.getConnection().configConnection(username, password, 1);                    
                    
                    if (!DatabaseConfiguration.isConnected()) {
                        configFrame();
                    } 
                    else 
                    {
                        requestPreviousData();      
                        Table.createTables();
                        loginFrame();
                    }
                }
            }
        }
    }
    
    private void loginFrame() {
        LoginFrame loginFrame = new LoginFrame();
        loginFrame.setVisible(true); 
    }
    
    private void loadFrame(){  
        ConfirmationFrame confirmFrame = new ConfirmationFrame(0);
        confirmFrame.setVisible(true);
        setProperties();
    }
    
    private void configFrame()
    {
        final NotificationFrame notify = new NotificationFrame();
        new Timer().schedule(new TimerTask()
        {
            @Override
            public void run() 
            {
                DatabaseErrorFrame error = new DatabaseErrorFrame();
                notify.setVisible(false);
                error.setVisible(true);
            }
        }, 4000);
        notify.setVisible(true);
    }
    
    private void setProperties()
    {
        files.getProperties().setProperty("dbusername", "root");
        files.getProperties().setProperty("dbpassword", "");
        files.saveFile();
    }
    
    private void resetPreferenceIfExist()
    {
        int tableCount = Table.count();

        if (tableCount < 1) 
        {
            String session = files.getProperties().getProperty("count");
            if (session != null) {
                files.getProperties().setProperty("count", "0");
                files.saveFile();
            }
        }                
    }
    
    public static void setDefaultResourceBundle(FileProcessor file)
    {
        final String DEFAULT_LANGUAGE = LanguageResources.getENGLISH();      
        boolean propertyVal = file.getProperties().containsKey("file");
     
        if (!propertyVal){
            file.getProperties().setProperty("language", "English (default)");
            file.getProperties().setProperty("file", DEFAULT_LANGUAGE);
            file.saveFile();
        }
    }
    
    private void requestPreviousData()
    {
        final String FILE_NAME = "userData.txt";
        ArrayList<User> userList = new ArrayList<>();
        Scripts scripts = new Scripts();
        
        try
        { 
            String path = new File(FILE_NAME).getAbsolutePath();
            
            if (Files.exists(new File(path).toPath())) 
            {
                try (InputStream inputStream = new FileInputStream(new File(FILE_NAME)))
                {
                    String[] data;
                    
                    try (BufferedReader readFile = new BufferedReader(new InputStreamReader(inputStream))) 
                    {
                        readFile.readLine();
                        
                        String next;
                        data = null;
                        
                        while((next = readFile.readLine()) != null) {
                             data = next.split("\\s+");
                        }
                    }
 
                    userList.add(new User(data[0], data[1], data[2], data[3], data[4]));
                    
                    scripts.addUser(
                            userList.get(0).getUsername(),
                            userList.get(0).getId(), 
                            userList.get(0).getContactNo(), 
                            userList.get(0).getPassword(), 
                            userList.get(0).getGender().charAt(0),
                            LocalDate.now()
                    );
                }
                Files.deleteIfExists(new File(path).toPath());
            }
        }
        catch(Exception ex) {
            Scripts.databaseStatusError(ex);
        }
    }

    /**
     * Inner class for executing an event task using the dispatch 
     * SwingWorker for handling concurrent threads. 
     */
    class GUIDelayTask extends SwingWorker<Void, Void>
    {
        @Override
        public Void doInBackground()
        {
            SecureRandom generator = new SecureRandom();
            setProgress(0);
            
            int index = 0;
            
            while (index < 100) {
                try {
                    Thread.sleep(generator.nextInt(450));
                }
                catch(InterruptedException interrupt){
                    System.err.format("%s", interrupt.getMessage());
                }
                setProgress(Math.min(index, 100));
                index++;
            }
            return null;
        }
        
        @Override
        public void done() {
            setCursor(null); 
            setVisible(false);
            LookAndFeel.setLookAndFeel("Windows");         
            checkDatabaseStatus();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {   
        LookAndFeel.setLookAndFeel("Windows");
        
        /* Create and display the form */
        EventQueue.invokeLater(() -> {
            new WelcomeFrame().setVisible(true);
        }); 
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel imageLabel;
    private javax.swing.JProgressBar progressBar;
    // End of variables declaration//GEN-END:variables
}