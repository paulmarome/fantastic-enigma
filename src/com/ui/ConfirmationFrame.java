package com.ui;

import java.awt.Color;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JProgressBar;
import com.database.DatabaseConfiguration;
import com.database.Table;
import com.lookandfeel.LookAndFeel;
import com.window.location.FrameEvents;
import files.FileProcessor;
import java.util.ResourceBundle;

public class ConfirmationFrame extends javax.swing.JFrame
{
    private static final FileProcessor FILE;
    private final int STEP;
    private static final String MSG1;
    private final String IMG1 = "/com/images/check.png";
    private final String IMG2 = "/com/images/uncheck.png";
    private static final ResourceBundle RESOURCE;
      
    @SuppressWarnings("LeakingThisInConstructor")
    public ConfirmationFrame(int step) 
    {
        initComponents();
        this.STEP = step;
        FrameEvents.centerFrame(this);
        monitorDatabaseStatus();
    }
    
    static 
    {
        FILE = FileProcessor.createFile("preference");
        FILE.loadFile();
        
        final String PREFERENCE_FILE = FILE.getProperties().getProperty("file");
        RESOURCE = ResourceBundle.getBundle(PREFERENCE_FILE);
        MSG1 = RESOURCE.getString("msg1");
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        innerPanel = new javax.swing.JPanel();
        databaseProgress = new javax.swing.JProgressBar();
        databaseLabel = new javax.swing.JLabel();
        importProgress = new javax.swing.JProgressBar();
        importLabel = new javax.swing.JLabel();
        importImage = new javax.swing.JLabel();
        databaseImage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        innerPanel.setBackground(new java.awt.Color(255, 255, 255));
        innerPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));

        databaseProgress.setIndeterminate(true);

        databaseLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        importProgress.setIndeterminate(true);

        importLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        javax.swing.GroupLayout innerPanelLayout = new javax.swing.GroupLayout(innerPanel);
        innerPanel.setLayout(innerPanelLayout);
        innerPanelLayout.setHorizontalGroup(
            innerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, innerPanelLayout.createSequentialGroup()
                .addContainerGap(50, Short.MAX_VALUE)
                .addGroup(innerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(databaseLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(importLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(databaseProgress, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(importProgress, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(innerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(databaseImage, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(importImage, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28))
        );
        innerPanelLayout.setVerticalGroup(
            innerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, innerPanelLayout.createSequentialGroup()
                .addContainerGap(70, Short.MAX_VALUE)
                .addComponent(databaseLabel)
                .addGap(9, 9, 9)
                .addGroup(innerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(databaseImage, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(innerPanelLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(databaseProgress, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(importLabel)
                .addGap(10, 10, 10)
                .addGroup(innerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(importProgress, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(importImage, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(innerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(innerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

//    public final void monitorDatabaseStatus()
//    {
//        final String MSG2 = resource.getString("msg2");
//        databaseLabel.setText(resource.getString("databaseLabel"));        
//        importProgress.setVisible(false);
//        
//        new Timer().schedule(new TimerTask()
//        {
//            @Override
//            public void run() 
//            {
//                if (DatabaseConfiguration.isConnected())
//                {
//                    setupPanelContent(databaseLabel, databaseImage,
//                            new Color(15, 183, 61), MSG2, IMG1, databaseProgress);
//                    
//                    importProgress.setVisible(true);
//                    databaseProgress.setValue(100);
//                    databaseProgress.setStringPainted(true);
//                    importTask();
//                } 
//                else
//                {
//                    try
//                    {
//                        setupPanelContent(databaseLabel, databaseImage, Color.RED,
//                                MSG1, IMG2, databaseProgress);
//                        
//                        Thread.sleep(400);
//                        dispose();
//                    } 
//                    catch (InterruptedException interruptErr) {
//                        System.out.format("%s%n", interruptErr);
//                    }
//                }
//            }
//        }, 5000);
//    }
//    
//    private void importTask() {
//        importLabel.setText(resource.getString("importLabel"));
//        initiateDatabaseVerifier();   
//    }
// 
//    private void initiateDatabaseVerifier()
//    {  
//        file.loadFile();
//        final String MSG2 = resource.getString("msgTable");
//        final String MSG3 = resource.getString("msg3");
//        
//        final int MAXIMUM_SIZE = 6; 
//        final int COUNT = Table.count();
//     
//        new Timer().schedule(new TimerTask()
//        {
//            @Override
//            public void run()
//            {
//                try
//                {
//                    if (COUNT != MAXIMUM_SIZE)
//                    {
//                        /* Prompt the invocation of <code>importDatabase</code> 
//                         * method to import the database to the MYSQL server 
//                         * automatically; we can't be sure whether or not the
//                         * script will execute successfully, so an alternative
//                         * is to execute the <code>createTables</code> method.
//                         */
//                        //ProgramScheduler.importDatabase(USERNAME, PASSWORD);
//                        
//                        /* Just for precaution, should the command script fail */
//                        Table.createTables();
//
//                        int recount = Table.count();
//
//                        if (recount == MAXIMUM_SIZE)
//                        {
//                            try 
//                            {
//                                setupPanelContent(importLabel, importImage,
//                                        new Color(15, 183, 61), MSG2, IMG1,
//                                        importProgress);
//
//                                importProgress.setValue(100); 
//                                importProgress.setStringPainted(true);
//                                  
//                                Thread.sleep(850);
//                                loginFrame();
//                            } 
//                            catch (Exception ex) {
//                                System.out.format("%n%s%n", ex);
//                            }
//                        } 
//                        else 
//                        {
//                            setupPanelContent(importLabel, importImage,
//                                    Color.RED, MSG1, IMG2, importProgress);
//                        }
//                    }
//                    else
//                    {
//                        setupPanelContent(importLabel, importImage,
//                                new Color(15, 183, 61), MSG3, IMG1,
//                                importProgress);
//
//                        importProgress.setValue(100); 
//                        importProgress.setStringPainted(true);
//                        
//                        Thread.sleep(800);
//                        loginFrame();
//                    }   
//                    Thread.sleep(2000);
//                    dispose();
//                } 
//                catch (InterruptedException loadErr) {
//                    System.out.format("%s%n", loadErr);
//                }
//            }
//        }, 5000);
//    }
// 
//    private void setupPanelContent(JLabel label, JLabel imageLabel, Color color, 
//            String msg, String path, JProgressBar progress) 
//    {
//        label.setForeground(color);
//        label.setText(msg);
//        imageLabel.setIcon(new ImageIcon(getClass().getResource(path)));
//        progress.setIndeterminate(false);
//    }
//    
//    private void loginFrame() {
//        LoginFrame loginFrame = new LoginFrame();
//        loginFrame.setVisible(true); 
//    }
    
    public final void monitorDatabaseStatus()
    {
        final String MSG2 = RESOURCE.getString("msg2");
        databaseLabel.setText(RESOURCE.getString("databaseLabel"));        
        importProgress.setVisible(false);
        
        new Timer().schedule(new TimerTask()
        {
            @Override
            public void run() 
            {
                if (DatabaseConfiguration.isConnected())
                {
                    setupPanelContent(databaseLabel, databaseImage, new Color(15, 183, 61), MSG2, IMG1, databaseProgress);
                    
                    importProgress.setVisible(true);
                    databaseProgress.setValue(100);
                    databaseProgress.setStringPainted(true);
                    importTask();
                } 
                else
                {
                    try
                    {
                        setupPanelContent(databaseLabel, databaseImage, Color.RED, MSG1, IMG2, databaseProgress);
                        Thread.sleep(400);
                        dispose();
                    } 
                    catch (InterruptedException interruptErr) {
                        System.out.format("%s%n", interruptErr);
                    }
                }
            }
        }, 5000);
    }
    
    private void importTask()
    {
        importLabel.setText(RESOURCE.getString("importLabel"));
        initiateDatabaseVerifier();   
    }
 
    private void initiateDatabaseVerifier()
    {  
        FILE.loadFile();
        final String MSG2 = RESOURCE.getString("msgTable");
        final String MSG3 = RESOURCE.getString("msg3");
        
        final int MAXIMUM_SIZE = 6; 
        final int TABLE_COUNT = Table.count();
        
        new Timer().schedule(new TimerTask()
        {
            @Override
            public void run()
            {
                try
                {
                    if (TABLE_COUNT != MAXIMUM_SIZE)
                    {
                        /* Prompt the invocation of <code>importDatabase</code> 
                         * method to import the database to the MYSQL server 
                         * automatically; we can't be sure whether or not the
                         * script will execute successfully, so an alternative
                         * is to execute the <code>createTables</code> method.
                         */
                        //ProgramScheduler.importDatabase(USERNAME, PASSWORD);
                        
                        /* Just for precaution, should the command script fail */
                        Table.createTables();

                        int recount = Table.count();
                        
                        if (recount == MAXIMUM_SIZE)
                        {
                            try 
                            {
                                setupPanelContent(importLabel, importImage, new Color(15, 183, 61), MSG2, IMG1, importProgress);

                                importProgress.setValue(100); 
                                importProgress.setStringPainted(true);
                                  
                                Thread.sleep(850);
                                loginFrame();
                            } 
                            catch (InterruptedException ex) {
                                System.out.format("%n%s%n", ex);
                            }
                        } 
                        else {
                            setupPanelContent(importLabel, importImage, Color.RED, MSG1, IMG2, importProgress);
                        }
                    }
                    else
                    {
                        setupPanelContent(importLabel, importImage, new Color(15, 183, 61), MSG3, IMG1, importProgress);

                        importProgress.setValue(100); 
                        importProgress.setStringPainted(true);
                        
                        Thread.sleep(800);
                        loginFrame();
                    }   
                    Thread.sleep(2000);
                    dispose();
                } 
                catch (InterruptedException loadErr) {
                    System.out.format("%s%n", loadErr);
                }
            }
        }, 5000);
    }
 
    private void setupPanelContent(JLabel label, JLabel imageLabel, Color color, 
            String msg, String path, JProgressBar progress) 
    {
        label.setForeground(color);
        label.setText(msg);
        imageLabel.setIcon(new ImageIcon(getClass().getResource(path)));
        progress.setIndeterminate(false);
    }
    
    private void loginFrame() {
        LoginFrame loginFrame = new LoginFrame();
        loginFrame.setVisible(true); 
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) 
    {
        /* Set the Nimbus look and feel */
        LookAndFeel.setLookAndFeel("Windows");

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ConfirmationFrame(0).setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel databaseImage;
    private javax.swing.JLabel databaseLabel;
    private javax.swing.JProgressBar databaseProgress;
    private javax.swing.JLabel importImage;
    private javax.swing.JLabel importLabel;
    private javax.swing.JProgressBar importProgress;
    private javax.swing.JPanel innerPanel;
    // End of variables declaration//GEN-END:variables
}